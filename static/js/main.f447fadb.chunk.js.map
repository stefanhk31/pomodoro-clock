{"version":3,"sources":["TimerHeader.js","TimerSettings.js","TimerDisplay.js","TimerControls.js","TimerFooter.js","App.js","serviceWorker.js","index.js"],"names":["TimerHeader","react_default","a","createElement","className","id","TimerSettings","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSessionClick","bind","assertThisInitialized","handleBreakClick","e","newSessionTime","sessionTime","target","add","subtract","get","changeSessionTime","newBreakTime","breakTime","changeBreakTime","onClick","label","Component","formatMMSS","val","TimerDisplay","currentTime","TimerControls","startTimer","stopTimer","resetTimer","TimerFooter","href","src","initSession","initBreak","initLabel","App","state","moment","duration","running","timer","switchLabel","switchTimer","countdown","playAudio","setState","clone","setInterval","interval","clearInterval","document","getElementById","play","src_TimerHeader","src_TimerSettings","src_TimerDisplay","src_TimerControls","src_TimerFooter","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oRASeA,SAPK,kBAChBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,+BAA+BC,GAAG,UAAhD,qBC0EOC,cA1EX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,mBAAqBP,EAAKO,mBAAmBC,KAAxBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAC1BA,EAAKU,iBAAmBV,EAAKU,iBAAiBF,KAAtBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAJTA,kFAQAW,GACf,IAAMC,EAAiBT,KAAKJ,MAAMc,YAElC,OAAQF,EAAEG,OAAOjB,IACb,IAAK,oBACDe,EAAeG,IAAI,EAAG,WACtB,MACJ,IAAK,oBACDH,EAAeI,SAAS,EAAG,WAK/Bb,KAAKJ,MAAMc,YAAYI,IAAI,WAAa,GACxCd,KAAKJ,MAAMc,YAAYE,IAAI,EAAG,WAIlCZ,KAAKJ,MAAMmB,kBAAkBN,4CAGhBD,GACb,IAAMQ,EAAehB,KAAKJ,MAAMqB,UAEhC,OAAQT,EAAEG,OAAOjB,IACb,IAAK,kBACDsB,EAAaJ,IAAI,EAAG,WACpB,MACJ,IAAK,kBACDI,EAAaH,SAAS,EAAG,WAI7Bb,KAAKJ,MAAMqB,UAAUH,IAAI,WAAa,GACtCd,KAAKJ,MAAMqB,UAAUL,IAAI,EAAG,WAGhCZ,KAAKJ,MAAMsB,gBAAgBF,oCAK3B,OACI1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BAA2BC,GAAG,oBAAoByB,QAASnB,KAAKI,oBAA/E,KACAd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWC,GAAG,iBAA7B,gBACAJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWC,GAAG,kBAAkBM,KAAKJ,MAAMc,YAAYI,IAAI,WAA1E,WACAxB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BAA2BC,GAAG,oBAAoByB,QAASnB,KAAKI,oBAA/E,MAEJd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BAA2BC,GAAG,kBAAkByB,QAASnB,KAAKO,kBAA7E,KACAjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWC,GAAG,eAA7B,cACAJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWC,GAAG,gBAAgBM,KAAKJ,MAAMqB,UAAUH,IAAI,WAAtE,WACAxB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BAA2BC,GAAG,kBAAkByB,QAASnB,KAAKO,kBAA7E,MAEJjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qDAAqDC,GAAG,eAAeM,KAAKJ,MAAMwB,gBAlEzFC,aCCtBC,EAAa,SAACC,GAClB,OAAOA,EAAM,GAAK,IAAMA,EAAMA,GAcjBC,EAXM,SAAC5B,GAEpB,OACEN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mCAAmCC,GAAG,aAAa4B,EAAW1B,EAAM6B,YAAYX,IAAI,YAAnG,IAAiHQ,EAAW1B,EAAM6B,YAAYX,IAAI,gBCG3IY,EAdO,SAAC9B,GAAD,OAClBN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWC,GAAG,cACzBJ,EAAAC,EAAAC,cAAA,OAAKE,GAAG,QAAQD,UAAU,kBAAkB0B,QAASvB,EAAM+B,YAA3D,SACArC,EAAAC,EAAAC,cAAA,OAAKE,GAAG,OAAOD,UAAU,iBAAiB0B,QAASvB,EAAMgC,WAAzD,UAGNtC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kCAAkCC,GAAG,QAAQyB,QAASvB,EAAMiC,YAA3E,YCAOC,EATK,kBAChBxC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAkBC,GAAG,UAASJ,EAAAC,EAAAC,cAAA,gBAAOF,EAAAC,EAAAC,cAAA,KAAGuC,KAAK,iCAAR,iBAExDzC,EAAAC,EAAAC,cAAA,SAAOE,GAAG,OAAOsC,IAAI,yGCEvBC,EAAc,GACdC,EAAY,EACZC,EAAY,UA4IHC,cAzIb,SAAAA,EAAYxC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAoC,IACjBvC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsC,GAAAjC,KAAAH,KAAMJ,KAEDyC,MAAQ,CACXZ,YAAaa,IAAOC,SAASN,EAAa,WAC1CvB,YAAa4B,IAAOC,SAASN,EAAa,WAC1ChB,UAAWqB,IAAOC,SAASL,EAAW,WACtCd,MAAOe,EACPK,SAAS,EACTC,MAAO,MAGT5C,EAAKkB,kBAAoBlB,EAAKkB,kBAAkBV,KAAvBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACzBA,EAAKqB,gBAAkBrB,EAAKqB,gBAAgBb,KAArBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACvBA,EAAK6C,YAAc7C,EAAK6C,YAAYrC,KAAjBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACnBA,EAAK8C,YAAc9C,EAAK8C,YAAYtC,KAAjBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACnBA,EAAK8B,WAAa9B,EAAK8B,WAAWtB,KAAhBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAClBA,EAAK+B,UAAY/B,EAAK+B,UAAUvB,KAAfP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACjBA,EAAKgC,WAAahC,EAAKgC,WAAWxB,KAAhBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAClBA,EAAK+C,UAAY/C,EAAK+C,UAAUvC,KAAfP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACjBA,EAAKgD,UAAYhD,EAAKgD,UAAUxC,KAAfP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KApBAA,mFAyBjBG,KAAK8C,SAAS,CACZrB,YAAkC,YAArBzB,KAAKqC,MAAMjB,MAAsBpB,KAAKqC,MAAM3B,YAAYqC,QAAU/C,KAAKqC,MAAMpB,UAAU8B,oDAKtFtC,GACdT,KAAK8C,SAAS,CACZrB,YAAczB,KAAKqC,MAAMG,SAAgC,YAArBxC,KAAKqC,MAAMjB,MAA+CpB,KAAKqC,MAAMZ,YAApChB,EAAesC,QACpFrC,YAAaD,4CAKHO,GACZhB,KAAK8C,SAAS,CACZrB,YAAczB,KAAKqC,MAAMG,SAAgC,UAArBxC,KAAKqC,MAAMjB,MAA2CpB,KAAKqC,MAAMZ,YAAlCT,EAAa+B,QAChF9B,UAAWD,0CAMfhB,KAAK8C,SAAS,CACZ1B,MAA4B,YAArBpB,KAAKqC,MAAMjB,MAAsB,YAAoB,kDAM9DpB,KAAK8C,SAAS,CACZrB,YAAkC,YAArBzB,KAAKqC,MAAMjB,MAAsBpB,KAAKqC,MAAM3B,YAAYqC,QAAU/C,KAAKqC,MAAMpB,UAAU8B,+CAOlG/C,KAAKqC,MAAMG,SAGbxC,KAAK8C,SAAS,CACZN,SAAS,EACTC,MAAOO,YAAYhD,KAAK4C,UAAW,2CAOvC,GAAK5C,KAAKqC,MAAMG,QAAhB,CAGE,IAAIS,EAAWjD,KAAKqC,MAAMI,MAE1BzC,KAAK8C,SAAS,CACZN,SAAS,EACTC,MAAOS,cAAcD,2CAOzB,IAAIA,EAAWjD,KAAKqC,MAAMI,MAE1BzC,KAAK8C,SAAS,CACZrB,YAAaa,IAAOC,SAASN,EAAa,WAC1CvB,YAAa4B,IAAOC,SAASN,EAAa,WAC1ChB,UAAWqB,IAAOC,SAASL,EAAW,WACtCd,MAAOe,EACPK,SAAS,EACTC,MAAOS,cAAcD,yCAMnBjD,KAAKqC,MAAMG,SACbxC,KAAK8C,SAAS,CACZrB,YAAazB,KAAKqC,MAAMZ,YAAYZ,SAAS,EAAG,aAIhDb,KAAKqC,MAAMG,SAAWxC,KAAKqC,MAAMZ,YAAYX,IAAI,YAAc,GAAKd,KAAKqC,MAAMZ,YAAYX,IAAI,YAAc,IAC/Gd,KAAK6C,YACL7C,KAAK0C,cACL1C,KAAK2C,mDAMKQ,SAASC,eAAe,QAChCC,wCAKJ,OACE/D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mCACbH,EAAAC,EAAAC,cAAC8D,EAAD,MACAhE,EAAAC,EAAAC,cAAC+D,EAAD,CAAe7C,YAAaV,KAAKqC,MAAM3B,YAAaO,UAAWjB,KAAKqC,MAAMpB,UAAWG,MAAOpB,KAAKqC,MAAMjB,MAAOoB,QAASxC,KAAKJ,MAAM4C,QAASzB,kBAAmBf,KAAKe,kBAAmBG,gBAAiBlB,KAAKkB,kBAC5M5B,EAAAC,EAAAC,cAACgE,EAAD,CAAc/B,YAAazB,KAAKqC,MAAMZ,cACtCnC,EAAAC,EAAAC,cAACiE,EAAD,CAAe9B,WAAY3B,KAAK2B,WAAYC,UAAW5B,KAAK4B,UAAWC,WAAY7B,KAAK6B,aACxFvC,EAAAC,EAAAC,cAACkE,EAAD,cAnIUrC,aCDEsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3E,EAAAC,EAAAC,cAAC0E,EAAD,MAASf,SAASC,eAAe,SDuH3C,kBAAmBe,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f447fadb.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst TimerHeader = () => (\r\n    <div className=\"row header-row\">\r\n        <h2 className=\"col text-center text-primary\" id=\"header\">Pomodoro Clock</h2>\r\n    </div>\r\n)\r\n\r\n\r\nexport default TimerHeader;","import React, { Component } from 'react';\r\n\r\n\r\nclass TimerSettings extends Component { \r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.handleSessionClick = this.handleSessionClick.bind(this);\r\n        this.handleBreakClick = this.handleBreakClick.bind(this);\r\n    }\r\n\r\n    //increment/decrement session and break times when user clicks + and - buttons\r\n    handleSessionClick(e) {\r\n        const newSessionTime = this.props.sessionTime;\r\n\r\n        switch (e.target.id) {\r\n            case \"session-increment\":\r\n                newSessionTime.add(1, 'minutes');\r\n                break;\r\n            case \"session-decrement\":\r\n                newSessionTime.subtract(1, 'minutes');\r\n                break;\r\n        }\r\n\r\n\r\n        if (this.props.sessionTime.get('minutes') < 0) {\r\n            this.props.sessionTime.add(1, 'minutes')\r\n        }\r\n\r\n\r\n        this.props.changeSessionTime(newSessionTime);       \r\n    }\r\n\r\n    handleBreakClick(e) {\r\n        const newBreakTime = this.props.breakTime;\r\n\r\n        switch (e.target.id) {\r\n            case \"break-increment\":\r\n                newBreakTime.add(1, 'minutes');\r\n                break;\r\n            case \"break-decrement\":\r\n                newBreakTime.subtract(1, 'minutes');\r\n                break;\r\n        }\r\n\r\n        if (this.props.breakTime.get('minutes') < 0) {\r\n            this.props.breakTime.add(1, 'minutes')\r\n        }\r\n\r\n        this.props.changeBreakTime(newBreakTime);\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"text-center timer-settings\">\r\n                <div className=\"row settings-row\">\r\n                    <div className=\"col-xs-1 btn btn-primary\" id=\"session-increment\" onClick={this.handleSessionClick}>+</div> \r\n                    <div className=\"col-xs-1\" id=\"session-label\">SESSION:&nbsp;</div>\r\n                    <div className=\"col-xs-1\" id=\"session-length\">{this.props.sessionTime.get('minutes')}:00&nbsp;</div>\r\n                    <div className=\"col-xs-1 btn btn-primary\" id=\"session-decrement\" onClick={this.handleSessionClick}>-</div> \r\n                </div>\r\n                <div className=\"row settings-row\">\r\n                    <div className=\"col-xs-1 btn btn-primary\" id=\"break-increment\" onClick={this.handleBreakClick}>+</div>\r\n                    <div className=\"col-xs-1\" id=\"break-label\">BREAK:&nbsp;</div>\r\n                    <div className=\"col-xs-1\" id=\"break-length\">{this.props.breakTime.get('minutes')}:00&nbsp;</div>\r\n                    <div className=\"col-xs-1 btn btn-primary\" id=\"break-decrement\" onClick={this.handleBreakClick}>-</div> \r\n                </div>\r\n                <div className=\"row settings-row\">\r\n                    <div className=\"col-md-1 text-primary text-center font-weight-bold\" id=\"timer-label\">{this.props.label}</div>\r\n                </div>\r\n            </div>\r\n        )   \r\n\r\n    }\r\n}\r\n\r\n\r\nexport default TimerSettings;","import React from 'react';\r\n\r\n\r\n//format time values into MM:SS\r\nconst formatMMSS = (val) => {\r\n  return val < 10 ? '0' + val : val\r\n}\r\n\r\nconst TimerDisplay = (props) => {\r\n\r\n  return (\r\n    <div className=\"text-center timer-display\">\r\n      <div className=\"row display-row\">\r\n        <div className=\"col text-center font-weight-bold\" id=\"time-left\">{formatMMSS(props.currentTime.get('minutes'))}:{formatMMSS(props.currentTime.get('seconds'))}</div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TimerDisplay; ","import React from 'react';\r\n\r\nconst TimerControls = (props) => (\r\n    <div className=\"text-center timer-controls\">\r\n    <div className=\"row controls-row\">\r\n        <div className=\"col-xs-4\" id=\"start_stop\">\r\n            <div id=\"start\" className=\"btn btn-success\" onClick={props.startTimer}>START</div>\r\n            <div id=\"stop\" className=\"btn btn-danger\" onClick={props.stopTimer}>STOP</div>\r\n        </div> \r\n      </div>\r\n      <div className=\"row settings-row\">\r\n        <div className=\"col text-center btn btn-warning\" id=\"reset\" onClick={props.resetTimer}>RESET</div>\r\n      </div>\r\n    </div>\r\n)\r\n\r\nexport default TimerControls;","import React from 'react';\r\n\r\nconst TimerFooter = () => (\r\n    <div className=\"text-center timer-footer\">\r\n        <div className=\"row\">\r\n            <div className=\"col text-center\" id=\"footer\"><em>by <a href=\"https://github.com/stefanhk31\">stefanhk31</a></em></div>\r\n        </div>\r\n        <audio id=\"beep\" src=\"https://raw.githubusercontent.com/stefanhk31/audio-files/master/246332__kwahmah-02__five-beeps.wav\" />\r\n    </div>\r\n)\r\n\r\nexport default TimerFooter;","import React, { Component } from 'react';\r\nimport moment from 'moment';\r\nimport './App.scss';\r\nimport TimerHeader from './TimerHeader';\r\nimport TimerSettings from './TimerSettings';\r\nimport TimerDisplay from './TimerDisplay';\r\nimport TimerControls from './TimerControls';\r\nimport TimerFooter from './TimerFooter';\r\n\r\nconst initSession = 25;\r\nconst initBreak = 5;\r\nconst initLabel = 'SESSION';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    //set parent state w/default durations, clock set to 'SESSION', and not running\r\n    this.state = {\r\n      currentTime: moment.duration(initSession, 'minutes'),\r\n      sessionTime: moment.duration(initSession, 'minutes'),\r\n      breakTime: moment.duration(initBreak, 'minutes'),\r\n      label: initLabel,\r\n      running: false,\r\n      timer: null\r\n    };\r\n    \r\n    this.changeSessionTime = this.changeSessionTime.bind(this);\r\n    this.changeBreakTime = this.changeBreakTime.bind(this);\r\n    this.switchLabel = this.switchLabel.bind(this);\r\n    this.switchTimer = this.switchTimer.bind(this);\r\n    this.startTimer = this.startTimer.bind(this);\r\n    this.stopTimer = this.stopTimer.bind(this);\r\n    this.resetTimer = this.resetTimer.bind(this);\r\n    this.countdown = this.countdown.bind(this);\r\n    this.playAudio = this.playAudio.bind(this);\r\n  }\r\n\r\n  //set currentTime to either sessionTime or breakTime on load\r\n  componentDidMount() {\r\n    this.setState({\r\n      currentTime: this.state.label === 'SESSION' ? this.state.sessionTime.clone() : this.state.breakTime.clone()\r\n    })\r\n  }\r\n\r\n  //change the session and/or break times that are displayed\r\n  changeSessionTime(newSessionTime) {\r\n      this.setState({\r\n        currentTime: !this.state.running && this.state.label === 'SESSION' ? newSessionTime.clone() : this.state.currentTime,\r\n        sessionTime: newSessionTime\r\n      })\r\n   \r\n  }\r\n\r\n  changeBreakTime(newBreakTime) {\r\n      this.setState({\r\n        currentTime: !this.state.running && this.state.label === 'BREAK' ? newBreakTime.clone() : this.state.currentTime,\r\n        breakTime: newBreakTime\r\n      })\r\n  }\r\n\r\n  //change the clock setting when an active timer hits 0\r\n  switchLabel() {\r\n    this.setState({\r\n      label: this.state.label === 'SESSION' ? '\\xa0' +  'BREAK' : 'SESSION'\r\n    })\r\n  }\r\n\r\n  //change the timer from session to break when an active timer hits 0\r\n  switchTimer() {\r\n    this.setState({\r\n      currentTime: this.state.label === 'SESSION' ? this.state.sessionTime.clone() : this.state.breakTime.clone()\r\n    })\r\n  }  \r\n\r\n\r\n  //start the timer when start button is clicked\r\n  startTimer() {\r\n    if (this.state.running) {\r\n      return\r\n    } else { \r\n      this.setState({\r\n        running: true,\r\n        timer: setInterval(this.countdown, 1000)\r\n      })\r\n    }\r\n  }\r\n\r\n  //stop the timer when stop (i.e., pause) button is clicked\r\n  stopTimer() {\r\n    if (!this.state.running) {\r\n      return\r\n    } else {\r\n      let interval = this.state.timer\r\n      \r\n      this.setState({\r\n        running: false,\r\n        timer: clearInterval(interval)\r\n      })\r\n    }\r\n  }\r\n\r\n  //reset the timer when reset button is clicked\r\n  resetTimer() {\r\n    let interval = this.state.timer\r\n\r\n    this.setState({\r\n      currentTime: moment.duration(initSession, 'minutes'),\r\n      sessionTime: moment.duration(initSession, 'minutes'),\r\n      breakTime: moment.duration(initBreak, 'minutes'),\r\n      label: initLabel,\r\n      running: false,\r\n      timer: clearInterval(interval)\r\n    })\r\n  }\r\n\r\n  //reduce timer by the second when running === true\r\n  countdown() {\r\n    if (this.state.running) {\r\n      this.setState({\r\n        currentTime: this.state.currentTime.subtract(1, 'seconds')\r\n      })\r\n  }\r\n\r\n    if (this.state.running && this.state.currentTime.get('minutes') <= 0 && this.state.currentTime.get('seconds') <= 0)  {\r\n      this.playAudio();\r\n      this.switchLabel();\r\n      this.switchTimer();\r\n    }\r\n\r\n  }\r\n\r\n playAudio() {\r\n   const beep = document.getElementById(\"beep\");\r\n   beep.play();\r\n }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container-fluid container-clock\">\r\n        <TimerHeader />\r\n        <TimerSettings sessionTime={this.state.sessionTime} breakTime={this.state.breakTime} label={this.state.label} running={this.props.running} changeSessionTime={this.changeSessionTime} changeBreakTime={this.changeBreakTime}/>\r\n        <TimerDisplay currentTime={this.state.currentTime} />\r\n        <TimerControls startTimer={this.startTimer} stopTimer={this.stopTimer} resetTimer={this.resetTimer}/>\r\n        <TimerFooter />\r\n      </div>\r\n    );\r\n  }  \r\n}\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}